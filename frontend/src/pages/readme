import React, { useState, useEffect, useRef } from 'react';

const originalSlides = [
  {
      img: "https://static.nationalgeographicbrasil.com/files/styles/image_3200/public/01-proboscis-monkey-NationalGeographic_2684060.webp?w=1600&h=1067",
      title: "Equipe Unida",
      description: "Momentos que marcam nossa jornada"
  },
  {
      img: "https://images.unsplash.com/photo-1556761175-b413da4baf72?w=800&h=500&fit=crop",
      title: "Celebração",
      description: "Conquistas que nos enchem de orgulho"
  },
  {
      img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQYHRsONUB8YLpYzUyHbjRZlcmTS9KEPXHCPg&s",
      title: "Reconhecimento",
      description: "O resultado do trabalho em equipe"
  },
  {
      img: "https://images.unsplash.com/photo-1542744173-8e7e53415bb0?w=800&h=500&fit=crop",
      title: "Parceria",
      description: "Juntos construímos algo especial"
  },
  {
      img: "https://images.unsplash.com/photo-1528605248644-14dd04022da1?w=800&h=500&fit=crop",
      title: "Futuro Brilhante",
      description: "Seguimos em frente com determinação"
  },
  {
      img: "https://images.unsplash.com/photo-1517457373958-b7bdd4587205?w=800&h=500&fit=crop",
      title: "Inovação",
      description: "Sempre buscando novas soluções"
  }
];

export default function Primeira() {
    const [currentSlide, setCurrentSlide] = useState(5); // Começar no meio dos clones
    const [isAutoplayActive, setIsAutoplayActive] = useState(true);
    const autoplayInterval = useRef(null);
    const wrapperRef = useRef(null);
    const totalSlides = originalSlides.length;
    const cloneCount = 5;
    const autoplayDelay = 4000;

    // Criar slides com clones para efeito infinito
    const allSlides = [
        ...originalSlides.slice(-cloneCount), // últimos slides no início
        ...originalSlides,                     // slides originais
        ...originalSlides.slice(0, cloneCount) // primeiros slides no final
    ];

    const updateCarouselPosition = () => {
        if (wrapperRef.current) {
            const slideWidth = 330; // 300px + 30px margin
            const centerOffset = (wrapperRef.current.parentElement.offsetWidth / 2) - (slideWidth / 2);
            wrapperRef.current.style.transform = `translateX(${centerOffset - (currentSlide * slideWidth)}px)`;
        }
    };

    const getRealSlideIndex = () => {
        if (currentSlide >= cloneCount && currentSlide < cloneCount + totalSlides) {
            return currentSlide - cloneCount;
        } else if (currentSlide < cloneCount) {
            return totalSlides - (cloneCount - currentSlide);
        } else {
            return currentSlide - totalSlides - cloneCount;
        }
    };

    const nextSlide = () => {
        const maxSlides = totalSlides + 10; // slides originais + 10 clones
        
        setCurrentSlide(prev => {
            const newSlide = prev + 1;
            
            if (newSlide >= maxSlides - cloneCount) {
                // Fazer teletransporte
                setTimeout(() => {
                    if (wrapperRef.current) {
                        wrapperRef.current.style.transition = 'none';
                        setCurrentSlide(cloneCount);
                        
                        setTimeout(() => {
                            if (wrapperRef.current) {
                                wrapperRef.current.style.transition = 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                            }
                        }, 50);
                    }
                }, 600);
            }
            
            return newSlide;
        });
    };

    const previousSlide = () => {
        setCurrentSlide(prev => {
            const newSlide = prev - 1;
            
            if (newSlide < cloneCount) {
                // Fazer teletransporte
                setTimeout(() => {
                    if (wrapperRef.current) {
                        wrapperRef.current.style.transition = 'none';
                        setCurrentSlide(totalSlides + cloneCount - 1);
                        
                        setTimeout(() => {
                            if (wrapperRef.current) {
                                wrapperRef.current.style.transition = 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                            }
                        }, 50);
                    }
                }, 600);
            }
            
            return newSlide;
        });
    };

    const goToSlide = (index) => {
        setCurrentSlide(index + cloneCount);
    };

    const goToSlideByClick = (index) => {
        setCurrentSlide(index);
    };

    const startAutoplay = () => {
        autoplayInterval.current = setInterval(nextSlide, autoplayDelay);
    };

    const stopAutoplay = () => {
        if (autoplayInterval.current) {
            clearInterval(autoplayInterval.current);
        }
    };

    // Effect para autoplay
    useEffect(() => {
        if (isAutoplayActive) {
            startAutoplay();
        } else {
            stopAutoplay();
        }

        return () => stopAutoplay();
    }, [isAutoplayActive]);

    // Effect para atualizar posição
    useEffect(() => {
        updateCarouselPosition();
    }, [currentSlide]);

    // Effect para redimensionamento
    useEffect(() => {
        const handleResize = () => {
            updateCarouselPosition();
        };

        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    return (
        <>
            <header className="bg-gradient-to-b from-blue-400 via-blue-300 to-white w-full h-96 flex gap-48 items-center">
                <div className="flex flex-col gap-8 justify-center items-center -mb-24">
                    <img className="w-32 h-36 p-12" src="/public/imgfrei2.svg-removebg-preview.png" alt="Logo" />
                </div>
                
                <div className="flex flex-col gap-8 justify-center items-center -mb-24 -mt-48">
                    <h1 className="text-white font-arial text-4xl font-bold">
                        5ª Feira de Profissões
                    </h1>
                    <h2 className="text-white font-arial text-2xl -mt-5">
                        Instituto Social Nossa Senhora de Fátima
                    </h2>
                    <div className="flex items-center justify-center w-96 h-24 bg-orange-500 rounded">
                        <h1 className="text-white font-arial font-bold text-xl">
                            Feira de Profissões
                        </h1>
                    </div>
                    <p className="text-white -mt-5 text-base">
                        <em><strong>"Esforço que transforma, e o orgulho permanece"</strong></em>
                    </p>
                </div>
                
                <div className="flex flex-col gap-8 justify-center items-center -mb-24">
                    <img className="w-36 h-36 px-16 py-24" src="/public/imgfrei.svg-removebg-preview.png" alt="Logo" />
                </div>
            </header>

            <main className="font-sans flex justify-center items-center min-h-screen p-5 bg-gradient-to-br from-blue-500 to-purple-600">
                <div className="max-w-6xl w-full bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
                    
                    <div className="relative overflow-hidden rounded-2xl shadow-2xl h-96 bg-gray-100">
                        <div 
                            ref={wrapperRef}
                            className="flex transition-transform duration-600 ease-out h-full items-center py-5"
                            style={{ 
                                transform: currentSlide !== null ? `translateX(${(wrapperRef.current?.parentElement?.offsetWidth / 2 || 600) - 165 - (currentSlide * 330)}px)` : 'translateX(0)'
                            }}
                            onMouseEnter={() => stopAutoplay()}
                            onMouseLeave={() => isAutoplayActive && startAutoplay()}
                        >
                            {allSlides.map((slide, index) => (
                                <div
                                    key={index}
                                    className={`
                                        flex-none w-80 h-52 mx-4 relative rounded-xl overflow-hidden cursor-pointer transition-all duration-600 ease-out
                                        ${index === currentSlide 
                                            ? 'transform scale-110 opacity-100 z-10 h-60 shadow-2xl' 
                                            : index === currentSlide - 1 || index === currentSlide + 1
                                            ? 'transform scale-90 opacity-80 z-10'
                                            : 'transform scale-75 opacity-60'
                                        }
                                    `}
                                    onClick={() => goToSlideByClick(index)}
                                >
                                    <img 
                                        src={slide.img} 
                                        alt={slide.title}
                                        className="w-full h-full object-cover rounded-xl"
                                    />
                                    <div className={`
                                        absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent text-white p-5 transition-transform duration-400
                                        ${index === currentSlide ? 'transform translate-y-0' : 'transform translate-y-full'}
                                    `}>
                                        <div className="text-lg font-semibold mb-1 drop-shadow-md">
                                            {slide.title}
                                        </div>
                                        <div className="text-sm opacity-95 drop-shadow-md">
                                            {slide.description}
                                        </div>
                                    </div>
                                    
                                    {/* Efeito de brilho na imagem ativa */}
                                    {index === currentSlide && (
                                        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/10 to-transparent pointer-events-none" />
                                    )}
                                </div>
                            ))}
                        </div>
                        
                        {/* Botões de navegação */}
                        <button
                            onClick={previousSlide}
                            className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/90 backdrop-blur-md w-14 h-14 rounded-full text-gray-800 text-2xl flex items-center justify-center hover:bg-white hover:scale-110 transition-all duration-300 shadow-lg z-20"
                        >
                            ‹
                        </button>
                        <button
                            onClick={nextSlide}
                            className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/90 backdrop-blur-md w-14 h-14 rounded-full text-gray-800 text-2xl flex items-center justify-center hover:bg-white hover:scale-110 transition-all duration-300 shadow-lg z-20"
                        >
                            ›
                        </button>
                    </div>
                    
                    {/* Indicadores */}
                    <div className="flex justify-center gap-3 mt-6">
                        {originalSlides.map((_, index) => (
                            <div
                                key={index}
                                onClick={() => goToSlide(index)}
                                className={`
                                    w-3 h-3 rounded-full cursor-pointer transition-all duration-300
                                    ${getRealSlideIndex() === index 
                                        ? 'bg-white shadow-lg transform scale-125 shadow-white/60' 
                                        : 'bg-white/40'
                                    }
                                `}
                            />
                        ))}
                    </div>
                </div>
            </main>
        </>
    );
}
